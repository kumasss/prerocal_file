<?php
session_start(); require_once(dirname(__FILE__).'/../../common/config.ini'); require_once(dirname(__FILE__).'/../../common/users.php'); require_once(dirname(__FILE__).'/../../common/groups.php'); $usersObj = new users(); $groupsObj = new groups(); if( $usersObj->get_auth_session( $_SESSION, $user )) { if( $usersObj->db_login( $user['email'], $user['password'], $auth=ADMIN_ROLL, $user )) { session_regenerate_id( TRUE ); } else { $usersObj->session_dell(); } } else { header( 'Location:'.URL.'/admin/' ); } if( $_SERVER['REQUEST_METHOD'] == 'POST' || $_SERVER['REQUEST_METHOD'] == 'GET' ) { $usersObj->get_data($_REQUEST, $form_data); (!isset($form_data['status'])) ? $form_data['status'] = '':NULL; (!isset($form_data['email'])) ? $form_data['email'] = '':NULL; (!isset($form_data['name'])) ? $form_data['name'] = '':NULL; (!isset($form_data['order_no'])) ? $form_data['order_no'] = '':NULL; (!isset($form_data['story_no1'])) ? $form_data['story_no1'] = '':NULL; (!isset($form_data['story_no2'])) ? $form_data['story_no2'] = '':NULL; (!isset($form_data['create1'])) ? $form_data['create1'] = '':NULL; (!isset($form_data['create2'])) ? $form_data['create2'] = '':NULL; (!isset($form_data['send_date1'])) ? $form_data['send_date1'] = '':NULL; (!isset($form_data['send_date2'])) ? $form_data['send_date2'] = '':NULL; (!isset($form_data['admin_id'])) ? $form_data['admin_id'] = '':NULL; (!isset($form_data['delete_flg'])) ? $form_data['delete_flg'] = '0':NULL; $form_data['scenario_id'] = SCENARIOS_ID; $settings = $usersObj->get_settings( $id=1 ); (!isset($form_data['group_id'])) ? $form_data['group_id'] = '':NULL; if(empty($form_data['group_id'])) { if(!empty($_SESSION['group_id'])) { $g_id = htmlspecialchars($_SESSION['group_id']); if( !empty($g_id) ){ if( $g_id == "all" ){ $form_data['group_id'] = 1; }else{ $form_data['group_id'] = $g_id; } } }else{ $form_data['group_id'] = 1; } } elseif($form_data['group_id'] == 'all') { $form_data['group_id']=''; $_SESSION['group_id'] = ''; } else { $_SESSION['group_id'] = $form_data['group_id']; } $is_unit_folder = ($usersObj->is_unit_folder()!==false)?true:false; $is_unit = ($usersObj->is_users_unit()!==false)?true:false; $data_all = $usersObj->count_users( SCENARIOS_ID ); $user_search = isset( $form_data['usersearch'] ) ? $form_data['usersearch']:''; $cur_page = isset( $form_data['page'] ) ? $form_data['page']:1; $result_per_page = (defined('RESULT_PER_PAGE')) ? RESULT_PER_PAGE : 30; $skip = ( $cur_page - 1 ) * $result_per_page; $num_pages = isset( $data_all ) ? ceil( $data_all / $result_per_page ):''; } switch ($form_data['status']) { case 'user_search': if( $data_all == 0 ) { $err['user'] = "ユーザーが登録されていません。"; $groups_data = array('0'=>array('id'=>'0','group_name'=>'----')); $form_data['status'] = 'default'; require_once( 'list.php' ); return; } $groupsObj->get_all_group( $groups_data ); $groups_data = $groupsObj->add_group_all_section( $groups_data ); $form_data['scenario_id'] = SCENARIOS_ID; $form_data['auth'] = FLG_NORMAL; (!isset($form_data['submit'])) ? $form_data['submit'] = '':NULL; if(is_array($form_data)) { if ($form_data['submit']=='csv'){ $usersObj->search_user_condition( $form_data, $data ); $usersObj->get_users_csv( $data ); break; } $form_data['email'] = trim(mb_convert_kana( $form_data['email'], 's', 'UTF-8' )); $form_data['name'] = trim(mb_convert_kana( $form_data['name'], 's', 'UTF-8' )); $form_data['order_no'] = trim(mb_convert_kana( $form_data['order_no'], 's', 'UTF-8' )); $data_all = $usersObj->search_user_condition( $form_data, $data, $skip, $result_per_page ); $num_pages = isset( $data_all ) ? ceil( $data_all / $result_per_page ):''; } require_once( 'list.php'); break; case 'add': $groupsObj->get_all_group( $groups_data ); $form_data['is_story_no'] = 0; $form_data['story_no'] = 0; require_once( 'add_user.php'); break; case 'user_add': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { $form_data['user_password'] = $settings['user_password']; $result = $usersObj->txtImport( $form_data ); } $groupsObj->get_all_group( $groups_data ); require_once( 'add_user.php'); break; case 'edit': $usersObj->db_set_user( $form_data['id'] ); $data = $usersObj->db_get_user(); $usersObj->get_send_date( $form_data['id'], $send_date ); $groupsObj->get_all_group( $groups_data ); if(empty($data['group_id'])){$data['group_id']=1;} if(empty($data['story_no'])){$data['story_no']=0;} $data['mail_send_date'] = $send_date['send_date']; if (!empty($_SERVER['HTTP_REFERER'])){ $returl = $_SERVER['HTTP_REFERER']; }else{ $returl = URL.'/admin/users/'; } require_once( 'edit_user.php'); break; case 'user_edit': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { $usersObj->check_mailadd( $form_data['email'] ); $usersObj->check_num( $form_data['story_no'], 4 ); if( !empty( $form_data['firstname'] )) $usersObj->check_word_count( $form_data['firstname'], 32 ); if( !empty( $form_data['lastname'] )) $usersObj->check_word_count( $form_data['lastname'], 32 ); if( $form_data['old_group_id'] !== $form_data['group_id'] ) $form_data['story_no'] = 0; $err = $usersObj->get_err(); if( empty( $err )) { $f_email = TRUE; $usersObj->db_set_user( $form_data['id'] ); $data = $usersObj->db_get_user(); if ($data['email'] != $form_data['email']) { $user_cnt = $usersObj->get_user_cnt( $form_data['email'] ); if( $user_cnt > 0 ) { $f_email = FALSE; $err['email'] = 'すでに登録されています。'; } } if ($f_email) { $usersObj->db_update_users( $form_data, $form_data['id'] ); if ($form_data['delete_flg'] == 0 && $form_data['old_delete_flg'] == 99){ $usersObj->del_logs_send_flg( $form_data['id'] ); } $message = 'ユーザー情報を更新しました。'; } } $data = $form_data; $groupsObj->get_all_group( $groups_data ); if (!empty($form_data['returl'])){ $returl = $form_data['returl']; } else { $returl = URL.'/admin/users/'; } require_once( 'edit_user.php'); } break; case 'password': require_once( 'edit_pw.php'); break; case 'user_password': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $settings == FALSE ) { $err['all'] = "設定情報にエラーが見つかりました。恐れ入りますがもう一度基本設定をして下さい。"; require_once( 'list.php'); return; } $usersObj->check_pw( $form_data['user_password'] ); $err = $usersObj->get_err(); if( empty( $err ) && ( $form_data['user_password'] != $settings['user_password'] )) { $usersObj->db_update_setting_user_password( $form_data, $settings['id'] ); if( $form_data['options0'] == 1 ) { $usersObj->db_update_all_password( $form_data ); } $settings['user_password'] = $form_data['user_password']; $message = 'パスワードの更新をしました。'; require_once( 'edit_pw.php'); } elseif( empty( $err )) { $err['all'] = 'パスワードが同じなので更新しませんでした。'; } require_once( 'edit_pw.php'); } break; case 'user_delete': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $usersObj->db_is_admin( $user['id'] )) { if ($is_unit !== false) { $unit_user_arr = $usersObj->is_user_in_unit( $form_data['id'] ); if ($unit_user_arr === false) { $usersObj->db_delete_user( $form_data['id'] ); } else { $unit_user_code=''; foreach( $unit_user_arr as $unit_user ){ $unit_user_code .= mb_strimwidth($unit_user['unit_name'],0,20,'....','utf-8').' / '; } $unit_user_code = rtrim($unit_user_code, ' / '); $err['delete'] = 'このユーザー[id:'.$form_data['id'].']はユニットメール['.$unit_user_code.']に登録されています。先に<a href="'.URL.'/admin/units/">ユニットメール</a>から削除して下さい。'; if( $data_all > 0 ) { $form_data['group_id']='all'; $usersObj->get_all_user( $data, $skip, $result_per_page ); $groupsObj->get_all_group( $groups_data ); $groups_data = $groupsObj->add_group_all_section( $groups_data ); } else { $err['user'] = "ユーザーが登録されていません。"; } $form_data['status'] = 'default'; require_once( 'list.php' ); break; } } else { $usersObj->db_delete_user( $form_data['id'] ); } } header( 'Location:'.URL.'/admin/users/' ); } break; case 'csv': if( $data_all > 0 ) { } else { $err['user'] = "ユーザーが登録されていません。"; } $result = ''; $form_data['options0'] = (isset($form_data['options0'])) ? $form_data['options0'] : 1; $form_data['options1'] = (isset($form_data['options1'])) ? $form_data['options1'] : 0; require_once( 'csv.php' ); break; case 'user_csv': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $usersObj->db_is_admin( $user['id'] )) { if( $data_all > 0 ) { $usersObj->get_all_user( $data ); } else { $err['user'] = "ユーザーが登録されていません。"; $result = ''; $form_data['options0'] = (isset($form_data['options0'])) ? $form_data['options0'] : 1; $form_data['options1'] = (isset($form_data['options1'])) ? $form_data['options1'] : 0; require_once( 'csv.php' ); break; } $usersObj->get_users_csv( $data ); } } break; case 'user_normal_csv': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $usersObj->db_is_admin( $user['id'] )) { if( $data_all > 0 ) { $form_data['group_id']=''; $form_data['auth'] = FLG_NORMAL; $form_data['email'] = ''; $form_data['name'] = ''; $form_data['order_no'] = ''; $data_all = $usersObj->search_user_condition( $form_data, $data ); } else { $err['user'] = "ユーザーが登録されていません。"; $result = ''; $form_data['options0'] = (isset($form_data['options0'])) ? $form_data['options0'] : 1; $form_data['options1'] = (isset($form_data['options1'])) ? $form_data['options1'] : 0; require_once( 'csv.php' ); break; } $usersObj->get_users_csv( $data ); } } break; case 'temp_csv': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $usersObj->db_is_admin( $user['id'] )) { $usersObj->get_users_csv(); } } break; case 'user_csv_upload': $result = ''; if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $usersObj->db_is_admin( $user['id'] )) { $upload_key = 'csv'; $csv_path = '../../tmp'; $result = $usersObj->csvImport( $data, $upload_key, $csv_path ); if( $result === TRUE) { $up_file = $data['store_file']; $filename = $csv_path.'/'.$up_file; $result = $usersObj->update_users_csv( $filename, $form_data ); $usersObj->unlinkRecursive( $csv_path, FALSE); } else { $err['upload'] = $result; } } } $form_data['options0'] = (isset($form_data['options0'])) ? $form_data['options0'] : 1; $form_data['options1'] = (isset($form_data['options1'])) ? $form_data['options1'] : 0; $data_all = $usersObj->count_users( SCENARIOS_ID ); $user_search = isset( $form_data['usersearch'] ) ? $form_data['usersearch']:''; $cur_page = isset( $form_data['page'] ) ? $form_data['page']:1; $result_per_page = (defined('RESULT_PER_PAGE')) ? RESULT_PER_PAGE : 30; $skip = ( $cur_page - 1 ) * $result_per_page; $num_pages = isset( $data_all ) ? ceil( $data_all / $result_per_page ):''; if( $data_all > 0 ) { $usersObj->get_all_user( $data, $skip, $result_per_page ); $groupsObj->get_all_group( $groups_data ); } else { $data =NULL; $err['user'] = "ユーザーが登録されていません。"; } require_once( 'csv.php' ); break; case 'edit_form_add': $form_data['form_add_done_message'] = $settings['form_add_done_message']; $form_data['message_id'] = $settings['id']; require_once(dirname(__FILE__).'/../../common/builders.php'); $buildersObj = new builders(); $buildersObj->get_all_setting($tp_settings); $form_data['form_head_script_add'] = $buildersObj->html_decode($tp_settings['head_script_add']); $form_data['form_body_script_add'] = $buildersObj->html_decode($tp_settings['body_script_add']); $form_data['script_id'] = $tp_settings['id']; require_once( 'edit_form_add.php'); break; case 'edit_form_add_done': $usersObj->db_update_setting_form_add_done_message( $form_data ); require_once(dirname(__FILE__).'/../../common/builders.php'); $buildersObj = new builders(); $form_data['head_script_add'] = $form_data['form_head_script_add']; $form_data['body_script_add'] = $form_data['form_body_script_add']; $form_data['id'] = $form_data['script_id']; $buildersObj->db_edit_script_setting($form_data); $message = '更新しました。'; require_once( 'edit_form_add.php'); break; case 'edit_form_stop': $form_data['form_stop_done_message'] = $settings['form_stop_done_message']; require_once( 'edit_form_stop.php'); break; case 'edit_form_stop_done': $usersObj->db_update_setting_form_stop_done_message( $form_data ); $message = '更新しました。'; require_once( 'edit_form_stop.php'); break; case 'form': $groupsObj->get_all_group( $groups_data ); $settings2 = $usersObj->get_settings( $form_data['group_id'] ); if( empty( $settings2 )) { $err1['all'] = '設定ファイルが足りません。'; $err2['all'] = '設定ファイルが足りません。<a href="'.URL.'/admin/groups/">グループ登録</a>でグループを削除してから、再度追加してみてください。'; } $form_data['form_url'] = URLADD.'?group_id='.$form_data['group_id']; $form_data['form_html'] = $usersObj->set_formadd( $settings, $form_data['group_id'] ); $form_data['form_iframe'] = $usersObj->set_formifadd( $form_data ); if( empty( $form_data['form_html'] )) { $err2['all'] = 'フォームテンプレートが設定されていません。'; } if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $settings == FALSE ) { $err['all'] = "設定情報にエラーが見つかりました。恐れ入りますがもう一度基本設定をして下さい。"; require_once( 'list.php'); return; } $usersObj->db_update_setting_form_password( $form_data, $settings['id'] ); $form_data['form_html'] = $usersObj->set_formadd( $form_data, $form_data['group_id'] ); if ($form_data['form_is_firstname'] == 1 or $form_data['form_is_lastname'] == 1 ){ $form_data['form_is_firstname'] = 1; $form_data['form_is_lastname'] = 1; } $settings['form_email'] = $form_data['form_email']; $settings['form_email2'] = $form_data['form_email2']; $settings['form_is_email'] = $form_data['form_is_email']; $settings['form_password2'] = $form_data['form_password2']; $settings['form_is_password2'] = $form_data['form_is_password2']; $settings['form_firstname'] = $form_data['form_firstname']; $settings['form_is_firstname'] = $form_data['form_is_firstname']; $settings['form_lastname'] = $form_data['form_lastname']; $settings['form_is_lastname'] = $form_data['form_is_lastname']; $settings['form_order_no'] = $form_data['form_order_no']; $settings['form_is_order_no'] = $form_data['form_is_order_no']; $message1 = 'フォームの設定を更新をしました。'; } require_once( 'form.php'); break; case 'form_password': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $settings == FALSE ) { $err['all'] = "設定情報にエラーが見つかりました。恐れ入りますがもう一度基本設定をして下さい。"; require_once( 'list.php'); return; } $groupsObj->get_all_group( $groups_data ); $settings2 = $usersObj->get_settings( $form_data['group_id'] ); $form_data['form_url'] = URLADD.'?group_id='.$form_data['group_id']; $form_data['form_html'] = $usersObj->set_formadd( $settings, $form_data['group_id'] ); $form_data['form_iframe'] = $usersObj->set_formifadd( $form_data ); $usersObj->check_pw( $form_data['form_password'] ); $err2 = $usersObj->get_err(); if( empty( $err2 )) { $usersObj->db_update_setting_group_form_password( $form_data, $form_data['group_id'] ); $settings2['form_password'] = $form_data['form_password']; $settings2['form_is_password'] = $form_data['form_is_password']; $message2 = 'パスワードの更新をしました。'; } require_once( 'form.php'); } break; case 'group_password': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { if( $settings == FALSE ) { $err['all'] = "設定情報にエラーが見つかりました。恐れ入りますがもう一度基本設定をして下さい。"; require_once( 'list.php'); return; } $groupsObj->get_all_group( $groups_data ); $settings2 = $usersObj->get_settings( $form_data['group_id'] ); if(!isset($form_data['group_id2'])){$form_data['group_id2']=$form_data['group_id'];} $group_name = $usersObj->db_get_group_name($form_data['group_id']); $group_name2 = $usersObj->db_get_group_name($form_data['group_id2']); $group_code = $usersObj->db_get_group_code( $form_data['group_id'] ); if(empty($group_code)){ $group_code = $groupsObj->make_group_code(); if( $group_code ) { $group_data['id'] = $form_data['group_id']; $group_data['group_name'] = $group_name; $group_data['group_code'] = $group_code; $groupsObj->db_edit_group( $group_data ); } else{ $err2['code'] = 'グループコード1の生成に失敗しました。グループを選択しなおしてください。'; } } $group_code2 = $usersObj->db_get_group_code( $form_data['group_id2'] ); if(empty($group_code2)){ $group_code2 = $groupsObj->make_group_code(); if( $group_code2 ) { $group_data['id'] = $form_data['group_id2']; $group_data['group_name'] = $group_name2; $group_data['group_code'] = $group_code2; $groupsObj->db_edit_group( $group_data ); } else{ $err2['code2'] = 'グループコード2の生成に失敗しました。グループを選択しなおしてください。'; } } $form_data['form_url'] = URLGROUP.'?group_id='.$group_code.'&group_id2='.$group_code2; $form_data['form_html'] = $usersObj->set_changegroup( $group_code, $group_code2, $group_name, $group_name2 ); $form_data['form_iframe'] = $usersObj->set_changeifgroup( $group_code, $group_code2 ); $usersObj->check_pw( $form_data['form_password'] ); $err2 = $usersObj->get_err(); if( empty( $err2 )) { $usersObj->db_update_setting_group_form_password( $form_data, $form_data['group_id'] ); $settings2['form_password'] = $form_data['form_password']; $settings2['form_is_password'] = $form_data['form_is_password']; $message2 = 'パスワードの更新をしました。'; } require_once( 'changegroup.php'); } break; case 'admin': if (!$usersObj->get_auth_session( $_SESSION, $user )) { header( 'Location:'.URL.'/admin/' ); } $usersObj->db_set_user( $user['id'] ); $data = $usersObj->db_get_user(); require_once(dirname(__FILE__).'/../../common/builders.php'); $buildersObj = new builders(); $buildersObj->get_all_setting($tp_settings); $form_data['email'] = $data['email']; $form_data['password1'] = ''; $form_data['password2'] = ''; $form_data['id'] = $data['id']; $form_data['admin_id'] = $settings['admin_id']; $form_data['firstname'] = $data['firstname']; $form_data['site_name'] = $tp_settings['site_name']; require_once(dirname(__FILE__).'/../../common/logs.php'); $logsObj = new logs(); $logsObj->check_act_mail(); if ($_SESSION['license_flg'] == 1){ $license_mess = TRUE; $_SESSION['license_flg'] = 2; $form_data['hash'] = 'admin'; } else { $license_mess = FALSE; $form_data['hash'] = 'admin'; } require_once( 'edit_admin.php' ); break; case 'admin_edit': if ($_SERVER['REQUEST_METHOD'] == 'POST') { $usersObj->check_mailadd( $form_data['email'] ); if( !empty( $form_data['password1'] )) { $usersObj->check_pw( $form_data['password1'] ); $usersObj->check_pw( $form_data['password2'] ); } $usersObj->check_double_pw( $form_data['password1'], $form_data['password2'] ); if (!empty( $form_data['admin_id'] )) { $usersObj->check_adminid( $form_data['admin_id'], 200 ); } $usersObj->check_word_count( $form_data['firstname'], 100 ); $usersObj->check_word_count2( $form_data['site_name'], 200 ); $err = $usersObj->get_err(); if (empty( $err )) { if( !empty( $form_data['password1'] )) { $form_data['password'] = sha1( $form_data['password1'] ); } else { $usersObj->get_auth_session( $_SESSION, $user ); $form_data['password'] = $user['password']; } $usersObj->db_update_admin( $form_data, $form_data['id'] ); $usersObj->set_auth_session( $form_data ); $form_data['password1'] = NULL; $form_data['password2'] = NULL; $form_data['password'] = NULL; $usersObj->db_update_admin_id( $form_data['admin_id'] ); $usersObj->db_update_admin_name( $form_data['firstname'], $form_data['id'] ); $usersObj->db_update_site_name( $form_data['site_name'] ); $message = '管理者情報を更新しました。'; } else { if (!empty($err['adminid'])){$err['admin_id'] = $err['adminid'];} if (!empty($err['name'])){$err['firstname'] = $err['name'];} if (!empty($err['name2'])){$err['site_name'] = $err['name2'];} } $license_mess = FALSE; $form_data['hash'] = 'admin'; require_once( 'edit_admin.php' ); } break; case 'changegroup': $groupsObj->get_all_group( $groups_data ); if(!isset($form_data['group_id2'])){$form_data ['group_id2']=$form_data['group_id'];} $settings2 = $usersObj->get_settings( $form_data['group_id'] ); $settings3 = $usersObj->get_settings( $form_data['group_id2'] ); if( empty( $settings2 )) { $err1['all'] = '設定ファイルが足りません。'; $err2['all'] = '設定ファイルが足りません。<a href="'.URL.'/admin/groups/">グループ設定</a>でグループを削除してから、再度追加してみてください。'; } if(!isset($form_data['group_id2'])){$form_data['group_id2']=$form_data['group_id'];} $group_name = $usersObj->db_get_group_name($form_data['group_id']); $group_name2 = $usersObj->db_get_group_name($form_data['group_id2']); $group_code = $usersObj->db_get_group_code( $form_data['group_id'] ); if(empty($group_code)){ $group_code = $groupsObj->make_group_code(); if( $group_code ) { $group_data['id'] = $form_data['group_id']; $group_data['group_name'] = $group_name; $group_data['group_code'] = $group_code; $groupsObj->db_edit_group( $group_data ); } else{ $err2['code'] = 'グループコード1の生成に失敗しました。グループを選択しなおしてください。'; } } $group_code2 = $usersObj->db_get_group_code( $form_data['group_id2'] ); if(empty($group_code2)){ $group_code2 = $groupsObj->make_group_code(); if( $group_code2 ) { $group_data['id'] = $form_data['group_id2']; $group_data['group_name'] = $group_name2; $group_data['group_code'] = $group_code2; $groupsObj->db_edit_group( $group_data ); } else{ $err2['code2'] = 'グループコード2の生成に失敗しました。グループを選択しなおしてください。'; } } $form_data['form_url'] = URLGROUP.'?group_id='.$group_code.'&group_id2='.$group_code2; $form_data['form_html'] = $usersObj->set_changegroup( $group_code, $group_code2, $group_name, $group_name2 ); $form_data['form_iframe'] = $usersObj->set_changeifgroup( $group_code, $group_code2 ); if( empty( $form_data['form_html'] )) { $err2['all'] = 'フォームテンプレートが設定されていません。'; } require_once( 'changegroup.php'); break; case 'system_backup': require_once( 'system_backup.php'); break; case 'get_system_backup': if( $_SERVER['REQUEST_METHOD'] == 'POST' ) { $usersObj->system_backup(); } break; case 'del_domain': if(!$usersObj->is_ajax())return; $domain = trim($form_data['domain']); $row = $usersObj->get_serialnumber(); if (!empty($row)){ $sn = $row->serialnumber; $receive = @file_get_contents(API_URL."delDomain?sn=".$sn."&u=".urlencode($domain)); if (!empty($receive)){ echo 1; break; } } echo 0; break; default: if( $settings == FALSE ) { $err['all'] = '設定情報にエラーが見つかりました。<a href="'.URL.'/admin/groups/">グループ登録</a>でグループをすべて削除して、新しく追加してみてください。'; } if( $data_all > 0 ) { $form_data['group_id']=''; $form_data['auth'] = FLG_NORMAL; $form_data['email'] = ''; $form_data['name'] = ''; $form_data['order_no'] = ''; $data_all = $usersObj->search_user_condition( $form_data, $data, $skip, $result_per_page ); $num_pages = isset( $data_all ) ? ceil( $data_all / $result_per_page ):''; $groupsObj->get_all_group( $groups_data ); $groups_data = $groupsObj->add_group_all_section( $groups_data ); } else { $err['user'] = "ユーザーが登録されていません。"; $groups_data = array('0'=>array('id'=>'0','group_name'=>'----')); } $form_data['status'] = 'default'; require_once( 'list.php' ); break; } ?>