<?php
 require_once( dirname(__FILE__).'/main.php' ); require_once( dirname(__FILE__).'/users.php' ); class builders extends main { function db_add_top( $data ) { try { $sql = "INSERT INTO `tp_tops` (
					`description` ,
					`keyword` ,
					`title` ,
					`contents` ,
					`add_br` ,
					`url` ,
					`public` ,
					`created` ,
					`modified`)
					VALUES (:description, :keyword, :title, :contents, :url, :public, NOW(), NULL)"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':description', $data['description'] ); $this->stmt->bindValue( ':keyword', $data['keyword'] ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':contents', $data['contents'] ); $this->stmt->bindValue( ':add_br', $data['add_br'] ); $this->stmt->bindValue( ':url', $data['url'] ); $this->stmt->bindValue( ':public', $data['public'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_top( $data ) { try { $sql = "UPDATE `tp_tops`
					SET
					`description` = :description,
					`keyword` = :keyword,
					`title` = :title,
					`contents` = :contents,
					`add_br` = :add_br,
					`url` = :url,
					`public` = :public,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':description', $data['description'] ); $this->stmt->bindValue( ':keyword', $data['keyword'] ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':contents', $data['contents'] ); $this->stmt->bindValue( ':add_br', $data['add_br'] ); $this->stmt->bindValue( ':url', $data['url'] ); $this->stmt->bindValue( ':public', $data['public'] ); $this->stmt->bindValue( ':id', $data['id'], PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_all_top( &$data, $start=0, $num=1 ) { $result = FALSE; $this->db_all_top( $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt == 1) { $data = $row[0]; $result = TRUE; } return $result; } private function db_all_top( $start, $num ) { try { $sql = "SELECT * FROM `tp_tops` ORDER BY `created` ASC LIMIT :start, :num"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':start', $start, PDO::PARAM_INT ); $this->stmt->bindValue( ':num', $num, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_top( $id, &$data ) { $result = false; $this->db_top( $id ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt == 1) { $data = $row[0]; $result = true; } return $result; } private function db_top( $id ) { try { $sql = "SELECT * FROM `tp_tops` WHERE `id` = :id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function db_add_content( $data ) { try { $sql = "INSERT INTO `tp_contents` (
					`description` ,
					`keyword` ,
					`title` ,
					`position_c` ,
					`contents` ,
					`eye_image_id` ,
					`add_br` ,
					`url` ,
					`public_date` ,
					`no_public_date` ,
					`public` ,
					`password` ,
					`group_id` ,
					`created` ,
					`modified`)
					VALUES (:description, :keyword, :title, :position_c, :contents, :eye_image_id, :add_br, :url, :public_date, :no_public_date, :public, :password, :group_id, NOW(), NULL)"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':description', $data['description'] ); $this->stmt->bindValue( ':keyword', $data['keyword'] ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':position_c', $data['position_c'] ); $this->stmt->bindValue( ':add_br', $data['add_br'] ); $this->stmt->bindValue( ':contents', $data['contents'] ); $this->stmt->bindValue( ':eye_image_id', $data['eye_image_id'] ); $this->stmt->bindValue( ':url', $data['url'] ); $this->stmt->bindValue( ':public_date', $data['public_date'] ); $this->stmt->bindValue( ':no_public_date', $data['no_public_date'] ); $this->stmt->bindValue( ':public', $data['public'] ); $this->stmt->bindValue( ':password', $data['password'] ); $this->stmt->bindValue( ':group_id', $data['group_id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_content( $data ) { try { $sql = "UPDATE `tp_contents`
					SET
					`description` = :description,
					`keyword` = :keyword,
					`title` = :title,
					`position_c` = :position_c,
					`contents` = :contents,
					`eye_image_id` = :eye_image_id,
					`add_br` = :add_br,
					`url` = :url,
					`public_date` = :public_date,
					`no_public_date` = :no_public_date,
					`public` = :public,
					`password` = :password,
					`group_id` = :group_id,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':description', $data['description'] ); $this->stmt->bindValue( ':keyword', $data['keyword'] ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':position_c', $data['position_c'] ); $this->stmt->bindValue( ':contents', $data['contents'] ); $this->stmt->bindValue( ':eye_image_id', $data['eye_image_id'] ); $this->stmt->bindValue( ':add_br', $data['add_br'] ); $this->stmt->bindValue( ':url', $data['url'] ); $this->stmt->bindValue( ':public_date', $data['public_date'] ); $this->stmt->bindValue( ':no_public_date', $data['no_public_date'] ); $this->stmt->bindValue( ':public', $data['public'] ); $this->stmt->bindValue( ':password', $data['password'] ); $this->stmt->bindValue( ':group_id', $data['group_id'] ); $this->stmt->bindValue( ':id', $data['id'], PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_delete_content( $id ) { try { $sql = "DELETE FROM `tp_contents`
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function count_content( $group=NULL ) { $group=trim($group); $this->db_count_content( $group ); $cnt = $this->stmt->fetchAll(); return $cnt; } private function db_count_content( $group ) { try { $sql = 'SELECT COUNT(*) as cnt FROM `tp_contents`'; if(!empty($group) & $group!='all'){$sql .= " where FIND_IN_SET('1',`group_id`) OR FIND_IN_SET(".$group.",`group_id`)";} $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_all_content( &$data, $group=NULL, $sort=NULL, $sortby='ASC', $start=0, $num=999 ) { $result = FALSE; $start=(int)$start; $num=(int)$num; $this->db_all_content( $group, $sort, $sortby, $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_all_content( $group, $sort, $sortby, $start, $num ) { try { $sql = "SELECT c.*,st.title AS sidetitle FROM `tp_contents` AS c LEFT JOIN (`tp_sidebars` AS s LEFT JOIN tp_side_titles AS st ON s.side_title_id=st.id) ON c.id=s.contents_id"; if(!empty($group) & $group!='all'){$sql .= " where FIND_IN_SET('1',`group_id`) OR FIND_IN_SET('".$group."',`group_id`)";} if (empty($sort)) { $sql .= " ORDER BY `created` ".$sortby; } elseif ($sort=='title') { $sql .= " ORDER BY `title` ".$sortby.", `created` ASC"; } elseif ($sort=='sidetitle') { $sql .= " ORDER BY `sidetitle` ".$sortby.", `created` ASC"; } elseif ($sort=='date') { $sql .= " ORDER BY `public_date` ".$sortby.", `no_public_date` ".$sortby.", `created` ASC"; } elseif ($sort=='furl') { $sql .= " ORDER BY `id` ".$sortby.", `created` ASC"; } elseif ($sort=='curl') { $sql .= " ORDER BY `url` ".$sortby.", `created` ASC"; } $sql .= " LIMIT ".$start.','.$num; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_content( $id, &$data ) { $result = false; $this->db_content( $id ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt == 1) { $data = $row[0]; $result = true; } return $result; } private function db_content( $id ) { try { $sql = "SELECT * FROM `tp_contents` WHERE `id` = :id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function make_page_link( $search, $cur_page, $num_pages, $disp=8 ) { if(empty($search["group_id"])) $search["group_id"]="all"; if(empty($search["sort"])) $search["sort"]=""; if(empty($search["sortby"])) $search["sortby"]=""; $search_link = URL.'/admin/builders/?status=content&'; $search_arr[] = 'group_id='.$search["group_id"]; $search_arr[] = 'sort='.$search["sort"]; $search_arr[] = 'sortby='.$search["sortby"]; $search_link .= implode( '&', $search_arr ); $page_links = ''; $next = $cur_page+1; $prev = $cur_page-1; $start = ($cur_page-floor($disp/2) > 0) ? ($cur_page-floor($disp/2)) : 1; $end = ($start > 1) ? ($cur_page+floor($disp/2)) : $disp; if($cur_page > 1 ) { $page_links .= '<li><a href="'.$search_link.'&page='.$prev.'">&laquo; 前へ</a></li>'; } if($start >= 1){ $class = ($cur_page == 1) ? ' class="active"' : '' ; $page_links .= '<li'.$class.'><a href="'.$search_link.'&page=1">1</a></li>'; if($start > floor($disp/2)) $page_links .= '<li><a href="#">...</a></li>'; } for( $i=$start; $i<=$end; $i++ ) { $class = ($cur_page == $i) ? ' class="active"' : '' ; if($i <= $num_pages && $i > 1 ) { $page_links .= '<li'.$class.'><a href="'.$search_link.'&page='.$i.'">'.$i.'</a></li>'; } } if($num_pages > $end){ if($num_pages-1 > $end ) $page_links .= '<li><a href="#">...</a></li>'; $page_links .= '<li><a href="'.$search_link.'&page='.$num_pages.'">'.$num_pages.'</a></li>'; } if($cur_page < $num_pages){ $page_links .= '<li><a href="'.$search_link.'&page='.$next.'">次へ &raquo;</a></li>'; } return $page_links; } function get_content_csv( $data=null ) { $usersObj = new users(); $line = ""; for( $i = 0 ; $i < count( $data ); $i++ ) { $line.= "/*━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━*/\r\n"; $line.= "[[グループID]]\r\n"; $line.= $data[$i]['group_id']."\r\n"; $line.= "[[グループ名]]\r\n"; $line.= $usersObj->db_get_group_name($data[$i]['group_id'])."\r\n"; $line.= "[[タイトル]]\r\n"; $line.= $this->html_decode($data[$i]['title']); $line.= "\r\n"; $line.= "[[ディスクリプション]]\r\n"; $line.= (isset($data[$i]['description'])) ? $this->html_decode($data[$i]['description']):NULL; $line.= "\r\n"; $line.= "[[キーワード]]\r\n"; $line.= (isset($data[$i]['keyword'])) ? $this->html_decode($data[$i]['keyword']):NULL; $line.= "\r\n"; $line.= "[[本文]]\r\n"; $line.= $this->html_decode($data[$i]['contents']); $line.= "\r\n"; $line.= "[[公開(非公開:0/公開:1)]]\r\n"; $line.= $data[$i]['public']."\r\n"; $line.= "[[表示日]]\r\n"; $line.= $data[$i]['public_date']."\r\n"; $line.= "[[非表示日]]\r\n"; $line.= $data[$i]['no_public_date']."\r\n"; $line.= "[[パスワード]]\r\n"; $line.= $data[$i]['password']."\r\n"; $line.= "[[登録日]]\r\n"; $line.= $data[$i]['created']."\r\n"; } $file = "contentss_data_".date( "Ymd-His" ).'.txt'; $csv_data = mb_convert_encoding( $line, "sjis-win", 'utf-8' ); header("Content-Type: application/octet-stream"); header("Content-Disposition: attachment; filename={$file}"); echo($csv_data); } function get_max_id_tp_contents() { $this->db_max_id_tp_contents(); $row = $this->stmt->fetchAll(); return $row[0]['max']; } private function db_max_id_tp_contents() { try { $sql = "SELECT MAX(`id`) as max FROM `tp_contents`"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_contents_id_tp_contents($tc_id) { try { $sql = "SELECT `id` FROM `tp_contents` WHERE `position_c`  LIKE :tc_id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':tc_id', $tc_id ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); return $row[0]['id']; } catch(PDOException $e){ die($e->getMessage()); } } function db_edit_position_content( $data ) { try { $sql = "UPDATE `tp_contents`
					SET
					`position_c` = :position_c,
					`modified` = NOW()
					WHERE `id` = :mid;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':position_c', $data['position_c'] ); $this->stmt->bindValue( ':mid', $data['id'], PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_position_id_tp_contents($tc_id) { try { $sql = "SELECT `position_c` FROM `tp_contents` WHERE `id`  LIKE :tc_id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':tc_id', $tc_id ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); return $row[0]['position_c']; } catch(PDOException $e){ die($e->getMessage()); } } function get_id_tp_contents($title) { try { $sql = "SELECT `id` FROM `tp_contents` WHERE `title`  LIKE :title"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':title', $title ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { return $row[0]['id']; }else{ return 0; } } catch(PDOException $e){ die($e->getMessage()); } } function check_customurl($url, $id) { if( preg_match( "/^[a-zA-Z0-9_-]{1,64}$/" , $url) ) { $flg = $this->duplicate_url($url, $id); if ($flg){ return 1; } else { return 55; } } else { return 99; } } private function duplicate_url($url, $id) { try { $sql = "SELECT count(*) as cnt FROM `tp_contents` WHERE `url`=:url AND `id`!=:id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id ); $this->stmt->bindValue( ':url', $url ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); if($row[0]['cnt'] >= 1) { return false; }else{ return true; } } catch(PDOException $e){ die($e->getMessage()); } } function get_page($url) { try { $sql = "SELECT `id` FROM `tp_contents` WHERE `url` LIKE :url"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':url', $url ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt == 1) { return $row[0]['id']; }else{ return FALSE; } } catch(PDOException $e){ die($e->getMessage()); } } function get_all_sidebar( &$data, $start=0, $num=999 ) { $result = FALSE; $this->db_all_sidebar( $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_all_sidebar( $start, $num ) { try { $sql = "SELECT
			ts.id,
			ts.side_title_id,
			ts.contents_id,
			ts.position,
			tc.title as contents_title,
			tc.contents as contents_contents,
			tc.position_c,
			tc.public as contents_public,
			tc.public_date as contents_public_date,
			tc.no_public_date as contents_no_public_date,
			tc.group_id,
			tc.url,
			tst.title as side_titles_title,
			tst.position_m,
			tst.public as side_titles_public,
			tst.toggle_flg,
			tiu.id as img_uploaders_id,
			tiu.title as img_uploaders_title,
			tiu.store_folder as img_uploaders_store_folder,
			tiu.store_file as img_uploaders_store_file,
			tiu.thumbnail as img_uploaders_thumbnail
			FROM `tp_sidebars` ts
			LEFT JOIN tp_contents tc
			ON ts.contents_id = tc.id
			LEFT JOIN tp_side_titles tst
			ON ts.side_title_id = tst.id
			LEFT JOIN tp_img_uploaders tiu
			ON tc.eye_image_id = tiu.id
			ORDER BY `tst`.`position_m`, `tc`.`position_c` ASC
			LIMIT ".$start.",".$num; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_max_position_sidebar() { $this->db_max_position_sidebar(); $row = $this->stmt->fetchAll(); return $row[0]['max']; } private function db_max_position_sidebar() { try { $sql = "SELECT MAX(`position`) as max FROM `tp_sidebars`"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function make_sidebar( $data ) { $i = 0; foreach( $data as $content ) { $sidebar['contents_id'] = $content['id']; $sidebar['side_title_id'] = NULL; $sidebar['position'] = $i; $i++; $this->db_add_sidebars( $sidebar ); } } function db_add_sidebars( $data ) { try { $sql = "INSERT INTO `tp_sidebars` (
					`contents_id` ,
					`side_title_id` ,
					`position` ,
					`created` ,
					`modified`)
					VALUES (:contents_id, :side_title_id, :position, NOW(), NULL)"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':contents_id', $data['contents_id'] ); $this->stmt->bindValue( ':side_title_id', $data['side_title_id'] ); $this->stmt->bindValue( ':position', $data['position'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_sidebars( $data ) { try { $sql = "UPDATE `tp_sidebars`
					SET
					`contents_id` = :contents_id,
					`side_title_id` = :side_title_id,
					`position` = :position,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':contents_id', $data['contents_id'] ); $this->stmt->bindValue( ':side_title_id', $data['side_title_id'] ); $this->stmt->bindValue( ':position', $data['position'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_delete_sidebars( $id ) { try { $sql = "DELETE FROM `tp_sidebars`
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_delete_sidebars_contents_id( $id ) { try { $sql = "DELETE FROM `tp_sidebars`
					WHERE `contents_id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_side_title_id_tp_sidebars( $id ) { try { $sql = "SELECT `side_title_id` FROM `tp_sidebars` WHERE `contents_id` LIKE :id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { return $row[0]['side_title_id']; }else{ return 0; } } catch(PDOException $e){ die($e->getMessage()); } } function get_edit_id_tp_sidebars( $id ) { try { $sql = "SELECT `id` FROM `tp_sidebars` WHERE `contents_id` LIKE :id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { return $row[0]['id']; }else{ return 0; } } catch(PDOException $e){ die($e->getMessage()); } } function get_midasi_sidebar( &$data, $midasi_id, $start=0, $num=999 ) { $result = FALSE; $this->db_midasi_sidebar( $midasi_id, $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_midasi_sidebar( $midasi_id, $start, $num ) { try { $sql = "SELECT
			ts.id,
			ts.side_title_id,
			ts.contents_id,
			ts.position,
			tc.title as contents_title,
			tc.contents as contents_contents,
			tc.position_c,
			tc.public as contents_public,
			tc.public_date as contents_public_date,
			tc.no_public_date as contents_no_public_date,
			tc.group_id,
			tst.title as side_titles_title,
			tst.position_m,
			tst.toggle_flg,
			tst.public as side_titles_public,
			tiu.id as img_uploaders_id,
			tiu.title as img_uploaders_title,
			tiu.store_folder as img_uploaders_store_folder,
			tiu.store_file as img_uploaders_store_file,
			tiu.thumbnail as img_uploaders_thumbnail
			FROM `tp_sidebars` ts
			LEFT JOIN tp_contents tc
			ON ts.contents_id = tc.id
			LEFT JOIN tp_side_titles tst
			ON ts.side_title_id = tst.id
			LEFT JOIN tp_img_uploaders tiu
			ON tc.eye_image_id = tiu.id
			WHERE `ts`.`side_title_id` = :mid 
			ORDER BY `tst`.`position_m`, `tc`.`position_c` ASC
			LIMIT :start, :num"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':mid', $midasi_id, PDO::PARAM_INT ); $this->stmt->bindValue( ':start', $start, PDO::PARAM_INT ); $this->stmt->bindValue( ':num', $num, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function ck_midasi_sidebar( $side_title_id ) { try { $sql = "SELECT
			SUM(tc.public)
			FROM `tp_sidebars` ts
			LEFT JOIN tp_contents tc
			ON ts.contents_id = tc.id
			LEFT JOIN tp_side_titles tst
			ON ts.side_title_id = tst.id
			LEFT JOIN tp_img_uploaders tiu
			ON tc.eye_image_id = tiu.id
			GROUP BY side_title_id
			having side_title_id LIKE :side_title_id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':side_title_id', $side_title_id, PDO::PARAM_INT ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { return $row[0]['SUM(tc.public)']; }else{ return 0; } } catch(PDOException $e){ die($e->getMessage()); } } function ck_exist_title_sidebar( $id ) { try { $sql = "SELECT
			COUNT(side_title_id)
			FROM `tp_sidebars`
			WHERE `side_title_id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); return $row[0]['COUNT(side_title_id)']; } catch(PDOException $e){ die($e->getMessage()); } } function get_old_sidebar( &$data, $start=0, $num=999 ) { $result = FALSE; $this->db_old_sidebar( $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_old_sidebar( $start, $num ) { try { $sql = "SELECT * FROM `tp_sidebars` ORDER BY position, id LIMIT "; $sql.= $start.','.$num; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function make_sidebars_data( $sidebars_data, $contents_data ) { if( !empty( $sidebars_data ) && !empty( $contents_data )) { foreach( $sidebars_data as $sidebar ) { if( !empty( $sidebar['contents_id'] )) { $contents_id[] = $sidebar['contents_id']; } else { $contents_id[] = ''; } } if( !empty( $contents_id )) { foreach( $contents_data as $content ) { if( !in_array( $content['id'], $contents_id )) { $id = $this->get_max_position_sidebar(); $sidebar['contents_id'] = $content['id']; $sidebar['side_title_id'] = NULL; $sidebar['position'] = $id+1; $this->db_add_sidebars( $sidebar ); } } } } if( !empty( $sidebars_data ) && empty( $contents_data )) { foreach($sidebars_data as $sidebar){ if(empty($sidebar['side_titles_title']) && !empty($sidebar['id'])){ $this->db_delete_sidebars( $sidebar['id'] ); } } } if( empty( $sidebars_data ) && !empty( $contents_data )) { $this->make_sidebar( $contents_data ); } return; } function check_reg_date( $start_date, $end_date ) { $public = FALSE; $reg_date = htmlspecialchars($_SESSION[SESSION_REG_DATE]); $today = $this->get_now_date(); $psd_day = floor((( strtotime( $reg_date ) - strtotime( $today )) / (60*60*24) ) +1); if(!empty($_SESSION['auth']))if($_SESSION['auth']=='9'){return $public = TRUE;} if($psd_day > 0) { if($start_date==0){return $public = TRUE;} return $public; } $psd_day = abs($psd_day); if( empty($end_date)){ $end_date = pow(10,10); } if( $start_date > $end_date ){ $end_date = $start_date; } if( (int)$start_date <= ceil($psd_day) & (int)$end_date >= ceil($psd_day) ) { $public = TRUE; } return $public; } function check_group( $group_id ) { $public = FALSE; if (empty($group_id)) return $public; $group_id_arr = explode(",", $group_id); if ( in_array('1', $group_id_arr) ) { $public = TRUE; } else { if (!empty($_SESSION['auth'])) { $auth = $_SESSION['auth']; } else { $auth = ''; } if ($auth === 9) { $public = TRUE; } else { if (isset($_SESSION[SESSION_GROUP_ID])){ $user['group_id'] = htmlspecialchars($_SESSION[SESSION_GROUP_ID]); } } if (isset($user)){ if (in_array($user['group_id'], $group_id_arr)){ $public = TRUE; } } } return $public; } function remake_tp_sidebar($form_data) { $this->get_old_sidebar($old_sidebar); if(empty($old_sidebar)){ return ("complete"); } $ct=0; foreach($old_sidebar as $col){ if( ($col['contents_id']==0)||($col['contents_id']==NULL)||($col['side_title_id']==0)||($col['side_title_id']==NULL)){ $ct++; } } if($ct>0){ $form_data['exist_olddata']=1; }else{ return ("complete"); } $this->reset_data_tp_sidebar($form_data); return ("complete"); } private function reset_data_tp_sidebar() { $sql = "CREATE TABLE IF NOT EXISTS `tp_sidebars_copy` LIKE  `tp_sidebars` "; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); $sql = "DELETE FROM `tp_sidebars_copy` "; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); $sql = "INSERT INTO `tp_sidebars_copy` SELECT * FROM `tp_sidebars` "; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); $this->get_old_sidebar($old_sidebar); $this->get_tp_side_titles( $side_title_data ); if( isset( $side_title_data )): foreach($side_title_data as $col): $side_title_data['id'] = $col['id']; $side_title_data['position_m']=0; $this->db_edit_position_side_title( $side_title_data ); endforeach; endif; $side_title_id=99999; foreach($old_sidebar as $key=>$col): if (($col['contents_id']!=0)&&($col['side_title_id']==0)){ $old_sidebar[$key]['side_title_id']=$side_title_id; }elseif(($col['contents_id']==0)&&($col['side_title_id']!=0)){ $side_title_id=$col['side_title_id']; } endforeach; $cnt=0; $this->get_tp_side_titles( $side_title_data ); foreach($old_sidebar as $col):if($col['side_title_id']==99999){$cnt++;}endforeach; if($cnt>0){ $t_cnt=$this->get_side_title_id_tp_side_titles("no caption"); if($t_cnt==0){ $side_title_data['side_title']="no caption"; $side_title_data['position_m']=0; $side_title_data['public']=1; $side_title_data['toggle_flg'] = 1; $this->db_add_side_titles( $side_title_data ); $no_caption_id=$this->get_max_id_tp_side_title(); }else{ $no_caption_id=$t_cnt; } foreach($old_sidebar as $key=>$col): if($col['side_title_id']==99999){ $old_sidebar[$key]['side_title_id']=$no_caption_id; } endforeach; } $cnt=1;$prev_id=0; $this->get_tp_side_titles($data); foreach($old_sidebar as $col): if (($col['contents_id']>0)&&($col['side_title_id']>0)){ if($prev_id!=$col['side_title_id']){ $data['id'] = $col['side_title_id']; $data['position_m'] =$cnt; $this->db_edit_position_side_title( $data ); $cnt++; $prev_id=$col['side_title_id']; } } endforeach; $cnt=1; $this->get_tp_side_titles( $side_title_data ); foreach($side_title_data as $col): if($col['position_m']!=0){$cnt++;} endforeach; $this->get_tp_side_titles( $side_title_data ); foreach($side_title_data as $col): if($col['position_m']==0){ $side_title_data['id'] = $col['id']; $side_title_data['position_m'] =$cnt; $this->db_edit_position_side_title( $side_title_data ); $cnt++; } endforeach; $cnt = 1; foreach($old_sidebar as $col): if (($col['contents_id']>0)&&($col['side_title_id']>0)){ $this->get_content( $col['contents_id'], $data ); $data['id']=$col['contents_id']; $data['position_c']=$cnt; $this->db_edit_content( $data ); $cnt++; } endforeach; $sql = "DELETE FROM `tp_sidebars` "; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); foreach($old_sidebar as $col): if (($col['contents_id']>0)&&($col['side_title_id']>0)){ $old_sidebar['contents_id'] = $col['contents_id']; $old_sidebar['side_title_id'] = $col['side_title_id']; $old_sidebar['position'] = 0; $this->db_add_sidebars( $old_sidebar ); }elseif($col['side_title_id']==99999){ $old_sidebar['contents_id'] = $col['contents_id']; $old_sidebar['side_title_id'] = $no_caption_id; $old_sidebar['position'] = 0; $this->db_add_sidebars( $old_sidebar ); } endforeach; } function ck_no_caption() { $cap_id=$this->get_side_title_id_tp_side_titles("no caption"); if($cap_id>0){ $this->get_old_sidebar($data); $cap_cnt=0; foreach($data as $col): if($col['side_title_id']==$cap_id){$cap_cnt++;} endforeach; if($cap_cnt==0){ $this->db_delete_side_titles( $cap_id ); } } return; } function get_all_side_freeareas( &$data, $start=0, $num=999 ) { $result = FALSE; $this->db_all_side_freeareas( $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_all_side_freeareas( $start, $num ) { try { $sql = "SELECT *
					FROM `tp_side_freeareas` 
					LIMIT "; $sql.= $start.','.$num; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function db_add_side_freeareas( $data ) { try { $sql = "INSERT INTO `tp_side_freeareas`(
					`id`,
					`contents`,
					`created`,
					`modified`)
					VALUES (:id, :contents, NOW(), NULL)"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':contents', $data['contents'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_side_freeareas( $data ) { try { $sql = "UPDATE `tp_side_freeareas`
					SET
					`contents` = :contents,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':contents', $data['contents'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_check_side_freeareas( $id ) { try { $sql = "SELECT count(*) as cnt
					FROM `tp_side_freeareas` 
					WHERE `id` =:id"; $stmt = $this->pdo->prepare( $sql ); $stmt->bindValue( ':id', $id ); $stmt->execute(); $row = $stmt->fetchAll(); return $row[0]['cnt']; } catch(PDOException $e){ die($e->getMessage()); } } function db_add_side_titles( $data ) { try { $sql = "INSERT INTO `tp_side_titles` (
					`title` ,
					`position_m` ,
					`public` ,
					`toggle_flg` ,
					`created` ,
					`modified`)
					VALUES (:title, :position_m, :public, :toggle_flg, NOW(), NULL)"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':title', $data['side_title'] ); $this->stmt->bindValue( ':position_m', $data['position_m'] ); $this->stmt->bindValue( ':public', $data['public'] ); $this->stmt->bindValue( ':toggle_flg', $data['toggle_flg'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_delete_side_titles( $id ) { try { $sql = "DELETE FROM `tp_side_titles`
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_side_title( $data ) { try { $sql = "UPDATE `tp_side_titles`
					SET
					`title` = :title,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':id', $data['id'], PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_tp_side_titles( &$data ) { $result = FALSE; $this->db_tp_side_titles(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } function db_tp_side_titles() { try { $sql = "SELECT id, title, toggle_flg, position_m FROM `tp_side_titles` ORDER BY `position_m` ASC"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_max_id_tp_side_title() { $this->db_max_id_tp_side_title(); $row = $this->stmt->fetchAll(); return $row[0]['max']; } private function db_max_id_tp_side_title() { try { $sql = "SELECT MAX(`id`) as max FROM `tp_side_titles`"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function db_edit_position_side_title( $data ) { try { $sql = "UPDATE `tp_side_titles`
					SET
					`position_m` = :position_m,
					`modified` = NOW()
					WHERE `id` = :mid;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':position_m', $data['position_m'] ); $this->stmt->bindValue( ':mid', $data['id'], PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_toggle_side_title( $data ) { try { $sql = "UPDATE `tp_side_titles`
					SET
					`toggle_flg` = :toggle_flg,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':toggle_flg', $data['toggle_flg'] ); $this->stmt->bindValue( ':id', $data['id'], PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_side_title_id_tp_side_titles( $title ) { try { $sql = "SELECT `id` FROM `tp_side_titles` WHERE `title`  LIKE :title"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':title', $title ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { return $row[0]['id']; }else{ return $cnt; } } catch(PDOException $e){ die($e->getMessage()); } } function get_side_title_name_tp_side_titles( $get_side_title_id ) { try { $sql = "SELECT `title` FROM `tp_side_titles` WHERE `id` LIKE :midasi_id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':midasi_id', $get_side_title_id ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); return $row[0]['title']; } catch(PDOException $e){ die($e->getMessage()); } } function get_side_title_id_tp_side_titles_position_m( $max_id ) { try { $sql = "SELECT `id` FROM `tp_side_titles` WHERE `position_m`  LIKE :id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $max_id ); $this->stmt->execute(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { return $row[0]['id']; }else{ return $cnt; } } catch(PDOException $e){ die($e->getMessage()); } } function get_all_img_uploaders( &$data, $start=0, $num=999 ) { $result = FALSE; $this->db_all_img_uploaders( $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_all_img_uploaders( $start, $num ) { try { $sql = "
			SELECT *
			FROM `tp_img_uploaders` 
			ORDER BY `created` DESC 
			LIMIT :start, :num
			"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':start', $start, PDO::PARAM_INT ); $this->stmt->bindValue( ':num', $num, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_all_img_uploaders2( &$data, $position=NULL, $start=0, $num=999 ) { $result = FALSE; $this->db_all_img_uploaders2( $position, $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_all_img_uploaders2( $position, $start, $num ) { try { $sql = "
			SELECT *
			FROM `tp_img_uploaders` 
			WHERE `position`  LIKE :position
			ORDER BY `created` DESC
			LIMIT :start, :num
			"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':position', $position ); $this->stmt->bindValue( ':start', $start, PDO::PARAM_INT ); $this->stmt->bindValue( ':num', $num, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function db_add_img_uploaders( $data ) { try { $sql = "INSERT INTO `tp_img_uploaders` (
					`title` ,
					`org_file` ,
					`store_file` ,
					`store_folder` ,
					`thumbnail` ,
					`created` ,
					`modified`)
					VALUES (:title, :org_file, :store_file, :store_folder, :thumbnail, NOW(), NULL)"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':org_file', $data['org_file'] ); $this->stmt->bindValue( ':store_file', $data['store_file'] ); $this->stmt->bindValue( ':store_folder', $data['store_folder'] ); $this->stmt->bindValue( ':thumbnail', $data['thumbnail'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_add_img_uploaders2( $data ) { try { $sql = "INSERT INTO `tp_img_uploaders` (
					`title` ,
					`org_file` ,
					`store_file` ,
					`store_folder` ,
					`position` ,
					`created` ,
					`modified`)
					VALUES (:title, :org_file, :store_file, :store_folder, :position, NOW(), NULL)"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':org_file', $data['org_file'] ); $this->stmt->bindValue( ':store_file', $data['store_file'] ); $this->stmt->bindValue( ':store_folder', $data['store_folder'] ); $this->stmt->bindValue( ':position', $data['position'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_delete_img_uploaders( $id ) { try { $sql = "DELETE FROM `tp_img_uploaders`
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_img_uploaders( $id, &$data ) { $result = false; $this->db_img_uploaders( $id ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt == 1) { $data = $row[0]; $result = true; } return $result; } private function db_img_uploaders( $id ) { try { $sql = "SELECT * FROM `tp_img_uploaders` WHERE `id` = :id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_all_setting( &$data ) { $result = FALSE; $this->db_all_setting(); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt == 1) { $data = $row[0]; $result = TRUE; } return $result; } private function db_all_setting() { try { $sql = "SELECT * FROM `tp_settings`"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function db_add_setting( $data ) { try { $sql = "INSERT INTO `tp_settings` (
					`site_name` ,
					`head` ,
					`css` ,
					`top_template` ,
					`contents_template` ,
					`created` ,
					`modified`
					)
					VALUES( :site_name, :head, :css, :top_template, :contents_template, NOW(), NULL )"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':site_name', $site_name ); $this->stmt->bindValue( ':head', $head ); $this->stmt->bindValue( ':css', $css ); $this->stmt->bindValue( ':top_template', $top_template ); $this->stmt->bindValue( ':contents_template', $contents_template ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_setting( $data ) { try { $sql = "UPDATE `tp_settings`
					SET
					`site_name` = :site_name ,
					`head` = :head ,
					`css` = :css ,
					`top_template` = :top_template ,
					`contents_template` = :contents_template ,
					`is_edit` = :is_edit ,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':site_name', $data['site_name'] ); $this->stmt->bindValue( ':head', $data['head'] ); $this->stmt->bindValue( ':css', $data['css'] ); $this->stmt->bindValue( ':top_template', $data['top_template'] ); $this->stmt->bindValue( ':contents_template', $data['contents_template'] ); $this->stmt->bindValue( ':is_edit', $data['is_edit'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_script_setting( $data ) { try { $sql = "UPDATE `tp_settings`
					SET
					`head_script_add` = :head_script_add ,
					`body_script_add` = :body_script_add ,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':head_script_add', $data['head_script_add'] ); $this->stmt->bindValue( ':body_script_add', $data['body_script_add'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_set_setting() { try { $sql = "INSERT INTO `tp_settings` (
					`site_name` ,
					`head` ,
					`css` ,
					`top_template` ,
					`contents_template` ,
					`created` ,
					`modified`
					)
					VALUES ( '会員サイトサイト名', '&lt;meta name=&quot;author&quot; content=&quot;AUTHOR&quot;&gt;', 'add.css', 'index.php', 'main.php', NOW(), NULL )"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_set_disp_flg( $field, $flg ) { try { $sql = "UPDATE `tp_settings`
					SET
					`{$field}` = :flg ,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':flg', $flg, PDO::PARAM_INT ); $this->stmt->bindValue( ':id', 1, PDO::PARAM_INT ); $this->stmt->execute(); return true; } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_all_delete_setting() { try { $sql = "TRUNCATE TABLE `tp_settings`"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function get_all_inquirys( &$data, $start=0, $num=1 ) { $result = FALSE; $this->db_all_inquirys( $start, $num ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt >= 1) { $data = $row; $result = TRUE; } return $result; } private function db_all_inquirys( $start, $num ) { try { $sql = "SELECT * FROM `tp_inquirys` ORDER BY `id` ASC LIMIT :start, :num"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':start', $start, PDO::PARAM_INT ); $this->stmt->bindValue( ':num', $num, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function get_inquirys( $id, &$data ) { if ($id == '') { $id = 1; } $result = false; $this->db_inquirys( $id ); $row = $this->stmt->fetchAll(); $cnt = count( $row ); if($cnt == 1) { $data = $row[0]; $result = true; } return $result; } private function db_inquirys( $id ) { try { $sql = "SELECT *,
					DATE_FORMAT(`dtstart`, '%Y-%m-%d') AS `start_date`,
					DATE_FORMAT(`dtstart`, '%k') AS `start_time_hour`,
					DATE_FORMAT(`dtstart`, '%i') AS `start_time_minute`,
					DATE_FORMAT(`dtend`, '%Y-%m-%d') AS `end_date`,
					DATE_FORMAT(`dtend`, '%k') AS `end_time_hour`,
					DATE_FORMAT(`dtend`, '%i') AS `end_time_minute` 
					FROM `tp_inquirys` WHERE `id` = :id"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch(PDOException $e){ die($e->getMessage()); } } function db_edit_inquirys( $data ) { try { $sql = "UPDATE `tp_inquirys`
					SET
					`title` = :title ,
					`contents` = :contents ,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':title', $data['title'] ); $this->stmt->bindValue( ':contents', $data['contents'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_inquirys_info( $data ) { try { $sql = "UPDATE `tp_inquirys`
					SET
					`info` = :info ,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':info', $data['info'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_add_inquirys( $data ) { try { $sql = "INSERT INTO `tp_inquirys` (`id`, `title`, `contents`, `info`, `formtitle`, `created`, `modified`) VALUES (NULL, '', '', '', :formtitle, NOW(), NULL);"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':formtitle', $data['formtitle'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_delete_inquirys( $id ) { try { $sql = "DELETE FROM `tp_inquirys`
					WHERE `tp_inquirys`.`id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':id', $id, PDO::PARAM_INT ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function db_edit_inquirys_formtitle( $data ) { try { $sql = "UPDATE `tp_inquirys`
					SET
					`formtitle` = :formtitle ,
					`modified` = NOW()
					WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':formtitle', $data['formtitle'] ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function upload( &$data, $upload_key='upfile', $save_directory='images', $max_filesize=9999000000 ) { $msg = FALSE; if (isset($_FILES[$upload_key])) { try { $error = $_FILES[$upload_key]['error']; if (is_array($error)) { throw new RuntimeException('複数ファイルの同時アップロードは許可されていません。'); } switch ($error) { case UPLOAD_ERR_INI_SIZE: throw new RuntimeException('php.iniで許可されている最大サイズを超過しました。'); case UPLOAD_ERR_FORM_SIZE: throw new RuntimeException('フォームで許可されている最大サイズを超過しました。'); case UPLOAD_ERR_PARTIAL: throw new RuntimeException('ファイルが壊れています。'); case UPLOAD_ERR_NO_FILE: throw new RuntimeException('ファイルが選択されていません。'); case UPLOAD_ERR_NO_TMP_DIR: throw new RuntimeException('テンポラリディレクトリが見つかりません。'); case UPLOAD_ERR_CANT_WRITE: throw new RuntimeException('テンポラリデータの生成に失敗しました。'); case UPLOAD_ERR_EXTENSION: throw new RuntimeException('エクステンションでエラーが発生しました。'); } $data['org_file'] = $_FILES[$upload_key]['name']; $ext = pathinfo( $data['org_file'], PATHINFO_EXTENSION ); $tmp_name = $_FILES[$upload_key]['tmp_name']; $data['size'] = $_FILES[$upload_key]['size']; $mictime = microtime(); $data['store_file'] = substr( $mictime, 11 ) . substr( $mictime, 2, 6 ) . '.' . $ext; if( $data['org_file'] === '' ) { throw new Exception('ファイル名が無効です。'); } if( $data['size'] > $max_filesize ) { throw new RuntimeException("{$max_filesize}バイトを超過するファイルは受理できません。"); } if( !is_uploaded_file( $tmp_name )) { throw new RuntimeException('不正なファイルです。'); } $finfo = new finfo(FILEINFO_MIME_TYPE); $type = $finfo->file($tmp_name); if( $finfo === false ) { throw new RuntimeException('MimeType取得に失敗しました。'); } if( strpos($type, 'image/') !== 0 ) { throw new RuntimeException('画像ファイルではありません。'); } $path = realpath($save_directory); if( $path === false || !is_dir( $path )) { throw new LogicException('ディレクトリが存在しません。'); } if( !is_writable( $path )) { throw new LogicException('ディレクトリに書き込み権限がありません。'); } $new_name = "{$path}/{$data['store_file']}"; if( is_file( $new_name )) { throw new RuntimeException("ファイル名が重複しています。"); } if( !move_uploaded_file( $tmp_name, $new_name )) { throw new RuntimeException('アップロードされたファイルの保存に失敗しました。'); } $msg = TRUE; } catch( Exception $e ) { $msg = $e->getMessage(); } } else { $msg = '送信されたファイルはありません。'; } return $msg; } function make_thumbnail( $data, $image_area_length=64 ) { $size = GetImageSize( $data['store_folder'].'/'.$data['store_file'] ); if( $size[0] > $size[1] ) { $height = $image_area_length; $width = $height * ($size[0] / $size[1]); } else { $width = $image_area_length; $height = $width * ($size[1] / $size[0]); } $thumb = new Image( $data['store_folder'].'/'.$data['store_file'] ); $thumb->name( $data['thumbnail'] ); $thumb->width( $width ); $thumb->height( $height ); $thumb->save(); $thumb = new Image( $data['store_folder'].'/'.$data['thumbnail'] ); $thumb->name( 'c-'.$data['thumbnail'] ); $thumb->width( $image_area_length ); $thumb->height( $image_area_length ); if( $width < $height ) { $thumb->crop( 0, ($height-$width)/2 ); } else { $thumb->crop( ($width-$height)/2, 0 ); } $thumb->save(); } function del_img_file( $data ) { @unlink( $data['store_folder'].'/'.$data['store_file'] ); @unlink( $data['store_folder'].'/'.$data['thumbnail'] ); @unlink( $data['store_folder'].'/c-'.$data['thumbnail'] ); } function br_replace( $str ) { $content = htmlspecialchars_decode( $str ); $content = nl2br( $content ); $content = $this->strip_br( $content ); return $content; } private function strip_br($str){ $search = array( '</h1><br />', '</h2><br />', '</h3><br />', '<ul><br />', '</ul><br />', '</li><br />', '</p><br />', '</blockquote><br />', '</div><br />', ); $replace = array('</h1>','</h2>','</h3>','<ul>','</ul>','</li>','</p>','</blockquote>','</div>'); $str = str_replace($search,$replace,$str); return $str; } private function tagOk($str){ $search = array( '&lt;br /&gt;', '&lt;ul&gt;', '&lt;/ul&gt;', '&lt;li&gt;', '&lt;/li&gt;', '&lt;b&gt;', '&lt;/b&gt;', '&lt;strong&gt;', '&lt;/strong&gt;', ); $replace = array('<br />','<ul>','</ul>','<li>','</li>','<b>','</b>','<strong>','</strong>'); $str = str_replace($search,$replace,$str); $str = preg_replace_callback( '|&lt;div.+?&gt;|', array($this, 'enc2tag'), $str ); $str = preg_replace_callback( '|&lt;\/div?&gt;|', array($this, 'enc2tag'), $str ); $str = preg_replace_callback( '|&lt;p.*&gt;|', array($this, 'enc2tag'), $str ); $str = preg_replace_callback( '|&lt;a.*&gt;|', array($this, 'enc2tag'), $str ); $str = preg_replace_callback( '|&lt;h2.*&gt;|', array($this, 'enc2tag'), $str ); return $str; } private function enc2tag( $tag ) { $str = str_replace( '&lt;', '<', $tag[0] ); $str = str_replace( '&gt;', '>', $str ); return $str; } function check_input_tops( $form ) { $this->check_contents($form["contents"]); } function check_input_contents( $form ) { $this->check_title($form["title"]); $this->check_url($form["url"], $form['id']); $this->check_contents($form["contents"]); $this->check_midasi($form["side_title"], $form["side_title2"]); (!empty($form["password"])) ? $this->check_pass($form["password"]):NULL; } function check_input_inquirys( $form ) { $this->check_title($form["title"]); $this->check_contents($form["contents"]); } function check_input_info( $form ) { $this->check_contents($form["info"]); } function check_input_side_titles( $form ) { $this->check_title($form["title"]); } function check_input_side_freeareas( $form ) { $this->check_contents($form["contents"]); } function check_input_site_name( $form ) { $this->check_title($form["site_name"]); } function check_input_side_titles_title( $form ) { $this->check_titles_title($form["side_titles_title"]); } function check_public_date( $public_date, $no_public_date ) { if( $public_date > $no_public_date ) { $this->err['public_date'] = '表示期間が正しくありません。'; } } private function check_pass( $pw ) { if( !preg_match( "/^([a-zA-Z0-9])([a-zA-Z0-9!-\/:\[-`\{-\~]{3,31})$/", $pw ) ) { $this->err['password'] = 'パスワードは半角英数字及び記号で4文字以上で入力してください。'; } } private function check_title( $title ) { if(mb_strlen($title,"UTF-8") < 2 ) { $this->err['title'] = 'タイトルを入力してください。'; } if(mb_strlen($title,"UTF-8") > 200 ) { $this->err['title'] = 'タイトルは200文字以内で入力してください。'; } } private function check_titles_title( $title ) { if(mb_strlen($title,"UTF-8") < 2 ) { $this->err['title'] = '見出しを入力してください。'; } if(mb_strlen($title,"UTF-8") > 200 ) { $this->err['title'] = '見出しは200文字以内で入力してください。'; } } private function check_url( $url, $id ) { $ret = $this->check_customurl($url, $id); if ($ret == 1) { } else if ($ret == 55){ $this->err['url'] = 'このカスタムURLはすでに使われています。'; } else if ($ret == 99){ $this->err['url'] = 'カスタムURLは半角英数字及び記号(-_)で1-64文字までで入力してください。'; } else { $this->err['url'] = 'カスタムURLでシステムエラーが発生しました。もう一度コンテンツの保存をやり直してください。'; } } private function check_contents( $contents ) { if(mb_strlen($contents,"UTF-8") < 2 ) { $this->err['contents'] = '本文を入力してください。'; } } private function check_template( $template ) { if(mb_strlen($template,"UTF-8") < 2 ) { $this->err['template'] = 'テンプレートを入力してください。'; } } private function check_midasi( $midasi1, $midasi2 ) { if ( ($midasi1=='') && ($midasi2=='') ){ $this->err['side_title'] = '見出しを入力してください。'; } else { if ( $midasi2!=''){ if(mb_strlen($midasi2,"UTF-8") >= 200 ) { $this->err['side_title'] = '見出しは200文字以内で入力してください。'; } else{ $midasi_id=$this->get_side_title_id_tp_side_titles( $midasi2 ); if ($midasi_id>0){ $this->err['side_title'] = 'すでにある見出しを入力しようとしています。'; } } } } } function get_err() { return $this->err; } function get_template_dir_array($path) { $template_dir_arr = array(); $template_dir_arr['default'] = "デフォルト"; $arr = array(); $dh = opendir($path); while (false !== ($target = readdir($dh))) { if($target == '.' || $target == '..' || $target == 'default'){ continue; }else if( is_dir($path . $target) ) { $arr[$target] = $target; } } closedir($dh); asort($arr); $result_arr = array_merge($template_dir_arr, $arr); return $result_arr; } function do_plugin( $data, &$plugins ) { $dir = dirname(__FILE__).'/../plugin'; $data_contents = $data; $result = $this->get_file_list( $dir ); $plugins = array(); $cnt=0; foreach ($result as $list) { $name = ''; $text = ''; require( $list ); $plugins[$cnt]['name'] = $name; $plugins[$cnt]['text'] = $text; $cnt++; } return $data_contents; } function get_plugin_text( $file ) { $dir = dirname(__FILE__).'/../plugin'; $result = $this->get_file_list( $dir, $file ); $text = ''; if (!empty($result)){ foreach ($result as $file_list) { if(file_exists($file_list)) { $text .= @file_get_contents($file_list); } } } return $text; } function db_edit_inquirys_form( $data ) { try { $sql = "UPDATE `tp_inquirys`
						SET
						`formtitle` = :formtitle ,
						`dtstart` = :dtstart ,
						`dtend` = :dtend ,
						`modified` = NOW()
						WHERE `id` = :id;"; $this->stmt = $this->pdo->prepare( $sql ); $this->stmt->bindValue( ':formtitle', $data['formtitle'] ); $this->stmt->bindValue( ':dtstart', $this->get_datetime_combined($data['start_date'],$data['start_time_hour'], $data['start_time_minute']) ); $this->stmt->bindValue( ':dtend', $this->get_datetime_combined($data['end_date'],$data['end_time_hour'], $data['end_time_minute']) ); $this->stmt->bindValue( ':id', $data['id'] ); $this->stmt->execute(); } catch( PDOException $e ){ die( $e->getMessage() ); } } function check_formtitle( $formtitle ) { if(mb_strlen($formtitle,"UTF-8") < 2 ) { $this->err['formtitle'] = 'タイトルを入力してください。'; } if(mb_strlen($formtitle,"UTF-8") > 1000 ) { $this->err['title'] = 'タイトルは1000文字以内で入力してください。'; } } function check_form_dtstartend( $dtstart, $dtend ) { if( !empty($dtstart) && !empty($dtstart) ) { if (date($dtend) < date('1970-01-01 12:00:00')) { return; } if (date($dtstart) == date($dtend)) { $this->err['formtitle'] = '開始日時と終了日時が同じです。'; return; } if (date($dtstart) > date($dtend)) { $this->err['formtitle'] = '開始日時と終了日時が矛盾しています。'; return; } } } function check_input_inquirys_form( $form ) { $this->check_formtitle($form["formtitle"]); $this->check_form_dtstartend( $this->get_datetime_combined($form['start_date'],$form['start_time_hour'], $form['start_time_minute']) , $this->get_datetime_combined($form['end_date'],$form['end_time_hour'], $form['end_time_minute']) ); } function get_datetime_combined($date, $hour, $minute) { $combined_datetime = $date." ".$hour.":".$minute.":00"; return $combined_datetime; } } ?>